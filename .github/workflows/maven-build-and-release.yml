name: Maven Build and Release

on:
  release:
    types: [ created ]  # Trigger when a new release is created

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Extract GitHub release tag
        run: echo "RELEASE_VERSION=$(echo ${GITHUB_REF#refs/tags/} | cut -c 2-)" >> $GITHUB_ENV

      - name: Print release version
        run: echo "Release version is ${{ env.RELEASE_VERSION }}"

      - name: Update Maven project version
        run: mvn versions:set -DnewVersion=${{ env.RELEASE_VERSION }} -X

      - name: Commit updated pom.xml
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pom.xml
          git commit -m "ci: update pom.xml version to ${{ env.RELEASE_VERSION }}"
          git push origin HEAD:main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Maven Clean Install
        run: mvn clean install

      - name: Upload JAR files to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/commonlib-${{ env.RELEASE_VERSION }}.jar
          asset_name: commonlib-${{ env.RELEASE_VERSION }}.jar
          asset_content_type: application/java-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}